{"ast":null,"code":"import _classCallCheck from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/src/components/barCharts.js\";\nimport React, { Component } from 'react';\nimport Chart from 'react-google-charts';\n\nvar BarCharts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BarCharts, _Component);\n\n  function BarCharts(props) {\n    var _this;\n\n    _classCallCheck(this, BarCharts);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BarCharts).call(this, props)); // neoDataDisplay : Créer un state qui va etre utiliser comme une base avec par default les titres du graph\n\n    _this.state = {\n      neoDataDisplay: [['NEO Name', 'Min Estimated Diameter (KMS)', 'Max Estimated Diameter']]\n    };\n    return _this;\n  } //Appel a l'api qui nous return un object (promise)\n\n\n  _createClass(BarCharts, [{\n    key: \"callApi\",\n    value: function callApi() {\n      return fetch(\"https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=h2vuNpgOwi4P3bqUpqys0ANkIuHL1cebMn0jeWE5\").then(function (res) {\n        return res.json();\n      }).then(function (result) {\n        return result;\n      });\n    } //Traite la promise et boucle sur near_earth_objects afin d'ajouter les valeurs de l'api à neoDataDisplay\n\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var neoDataDisplay = this.state.neoDataDisplay;\n      this.callApi().then(function (result) {\n        return result.near_earth_objects.map(function (obj) {\n          return neoDataDisplay.push([obj.name, obj.estimated_diameter.kilometers.estimated_diameter_min, obj.estimated_diameter.kilometers.estimated_diameter_max]);\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        width: '700px',\n        height: '500px',\n        chartType: \"BarChart\",\n        loader: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, \"Loading Chart\"),\n        data: this.state.neoDataDisplay,\n        options: {\n          title: 'Near Earth Objects estimated diameter',\n          chartArea: {\n            width: '50%'\n          },\n          hAxis: {\n            title: 'Diametre (KM)',\n            minValue: 0\n          },\n          vAxis: {\n            title: 'NEO Name'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BarCharts;\n}(Component);\n\nexport default BarCharts;","map":{"version":3,"sources":["/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/src/components/barCharts.js"],"names":["React","Component","Chart","BarCharts","props","state","neoDataDisplay","fetch","then","res","json","result","callApi","near_earth_objects","map","obj","push","name","estimated_diameter","kilometers","estimated_diameter_min","estimated_diameter_max","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;;IAEMC,S;;;;;AACF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAEf,mFAAMA,KAAN,GAFe,CAGX;;AACJ,UAAKC,KAAL,GAAa;AACTC,MAAAA,cAAc,EAAE,CAAC,CAAC,UAAD,EAAa,8BAAb,EAA6C,wBAA7C,CAAD;AADP,KAAb;AAJe;AAQlB,G,CAED;;;;;8BACS;AACL,aAAOC,KAAK,CAAC,8FAAD,CAAL,CACFC,IADE,CACG,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,OADN,EAEFF,IAFE,CAGC,UAACG,MAAD,EAAY;AACR,eAAOA,MAAP;AACH,OALF,CAAP;AAQH,K,CAED;;;;wCAEmB;AACf,UAAIL,cAAc,GAAI,KAAKD,KAAL,CAAWC,cAAjC;AAEA,WAAKM,OAAL,GAAeJ,IAAf,CAAoB,UAAAG,MAAM;AAAA,eACtBA,MAAM,CAACE,kBAAP,CAA0BC,GAA1B,CAA8B,UAACC,GAAD;AAAA,iBAC1BT,cAAc,CAACU,IAAf,CAAoB,CAACD,GAAG,CAACE,IAAL,EAAYF,GAAG,CAACG,kBAAJ,CAAuBC,UAAvB,CAAkCC,sBAA9C,EAChBL,GAAG,CAACG,kBAAJ,CAAuBC,UAAvB,CAAkCE,sBADlB,CAApB,CAD0B;AAAA,SAA9B,CADsB;AAAA,OAA1B;AAMH;;;6BAEQ;AAEL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,KAAK,EAAE,OADX;AAEI,QAAA,MAAM,EAAE,OAFZ;AAGI,QAAA,SAAS,EAAC,UAHd;AAII,QAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJZ;AAKI,QAAA,IAAI,EAAE,KAAKhB,KAAL,CAAWC,cALrB;AAMI,QAAA,OAAO,EAAE;AACLgB,UAAAA,KAAK,EAAE,uCADF;AAELC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAFN;AAGLC,UAAAA,KAAK,EAAE;AACHH,YAAAA,KAAK,EAAE,eADJ;AAEHI,YAAAA,QAAQ,EAAE;AAFP,WAHF;AAOLC,UAAAA,KAAK,EAAE;AACHL,YAAAA,KAAK,EAAE;AADJ;AAPF,SANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAsBH;;;;EA5DmBrB,S;;AA+DxB,eAAeE,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'react-google-charts';\n\nclass BarCharts extends Component {\n    constructor(props) {\n\n        super(props);\n            // neoDataDisplay : Créer un state qui va etre utiliser comme une base avec par default les titres du graph\n        this.state = {\n            neoDataDisplay: [['NEO Name', 'Min Estimated Diameter (KMS)', 'Max Estimated Diameter'],]\n        };\n\n    }\n\n    //Appel a l'api qui nous return un object (promise)\n    callApi(){\n        return fetch(\"https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=h2vuNpgOwi4P3bqUpqys0ANkIuHL1cebMn0jeWE5\")\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    return result\n                },\n\n            );\n    }\n\n    //Traite la promise et boucle sur near_earth_objects afin d'ajouter les valeurs de l'api à neoDataDisplay\n\n    componentDidMount(){\n        let neoDataDisplay  = this.state.neoDataDisplay;\n\n        this.callApi().then(result =>\n            result.near_earth_objects.map((obj) =>\n                neoDataDisplay.push([obj.name , obj.estimated_diameter.kilometers.estimated_diameter_min,\n                    obj.estimated_diameter.kilometers.estimated_diameter_max])\n            )\n        );  \n    }\n\n    render() {\n\n        return (\n            <div>\n                <Chart\n                    width={'700px'}\n                    height={'500px'}\n                    chartType=\"BarChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={this.state.neoDataDisplay}\n                    options={{\n                        title: 'Near Earth Objects estimated diameter',\n                        chartArea: { width: '50%' },\n                        hAxis: {\n                            title: 'Diametre (KM)',\n                            minValue: 0,\n                        },\n                        vAxis: {\n                            title: 'NEO Name',\n                        },\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default BarCharts;\n"]},"metadata":{},"sourceType":"module"}