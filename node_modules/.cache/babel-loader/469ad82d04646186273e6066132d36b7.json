{"ast":null,"code":"import _classCallCheck from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/src/components/barCharts.js\";\nimport React, { Component } from 'react';\nimport Chart from 'react-google-charts';\nimport axios from \"axios\";\n\nvar BarCharts =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BarCharts, _Component);\n\n  function BarCharts(props) {\n    var _this;\n\n    _classCallCheck(this, BarCharts);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BarCharts).call(this, props)); // neoDataObject :Assigner un l'object NEO (props du parent) à un state en ciblant 'near_earth_objects'\n    // neoDataDisplay : Créer un state qui va etre utiliser comme une base avec par default les titres du graph\n\n    _this.state = {\n      neoDataObject: {},\n      neoDataDisplay: [['NEO Name', 'Min Estimated Diameter (KMS)', 'Max Estimated Diameter']]\n    };\n    return _this;\n  }\n\n  _createClass(BarCharts, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var neoApiData = axios.get('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=h2vuNpgOwi4P3bqUpqys0ANkIuHL1cebMn0jeWE5').then(function (res) {\n        return res.data;\n      });\n      neoApiData.then(function (value) {\n        this.setState({\n          neoDataObject: value\n        });\n      }); //console.log(neoApiData);\n\n      console.log(this.state.neoDataObject); //fetch(this.state.neoDataObject).then(response => )\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //Ajouter les valeurs souhaiter dans le state neoDataDisplay avant de les afficher\n\n      /*neoApiData.then(function (value) {\n          console.log(value);\n      });*/\n      //let neoDataDisplay  = this.state.neoDataDisplay;\n\n      /*this.state.neoDataObject.map((obj) =>\n          neoDataDisplay.push([obj.name , obj.estimated_diameter.kilometers.estimated_diameter_min,\n                                          obj.estimated_diameter.kilometers.estimated_diameter_max])\n      );*/\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(Chart, {\n        width: '700px',\n        height: '500px',\n        chartType: \"BarChart\",\n        loader: React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"Loading Chart\"),\n        data: this.state.neoDataDisplay,\n        options: {\n          title: 'Near Earth Objects estimated diameter',\n          chartArea: {\n            width: '50%'\n          },\n          hAxis: {\n            title: 'Diametre (KM)',\n            minValue: 0\n          },\n          vAxis: {\n            title: 'NEO Name'\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BarCharts;\n}(Component);\n\nexport default BarCharts;","map":{"version":3,"sources":["/Users/nabil.b/Tests_Techniques/TT_Botify/neo_charts/src/components/barCharts.js"],"names":["React","Component","Chart","axios","BarCharts","props","state","neoDataObject","neoDataDisplay","neoApiData","get","then","res","data","value","setState","console","log","title","chartArea","width","hAxis","minValue","vAxis"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;IAEMC,S;;;;;AACF,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAEf,mFAAMA,KAAN,GAFe,CAGX;AACA;;AACJ,UAAKC,KAAL,GAAa;AACTC,MAAAA,aAAa,EAAG,EADP;AAETC,MAAAA,cAAc,EAAE,CAAC,CAAC,UAAD,EAAa,8BAAb,EAA6C,wBAA7C,CAAD;AAFP,KAAb;AALe;AAUlB;;;;wCAEkB;AACf,UAAMC,UAAU,GACZN,KAAK,CAACO,GAAN,CAAU,8FAAV,EACKC,IADL,CACU,UAAAC,GAAG,EAAI;AACT,eAAOA,GAAG,CAACC,IAAX;AACH,OAHL,CADJ;AAMAJ,MAAAA,UAAU,CAACE,IAAX,CAAgB,UAAUG,KAAV,EAAiB;AAC9B,aAAKC,QAAL,CAAc;AAACR,UAAAA,aAAa,EAAGO;AAAjB,SAAd;AACF,OAFD,EAPe,CAWf;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKX,KAAL,CAAWC,aAAvB,EAZe,CAcf;AACH;;;6BAEQ;AAEL;;AAIA;;;AAIA;;AACA;;;;AAKA,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,KAAK,EAAE,OADX;AAEI,QAAA,MAAM,EAAE,OAFZ;AAGI,QAAA,SAAS,EAAC,UAHd;AAII,QAAA,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAJZ;AAKI,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE,cALrB;AAMI,QAAA,OAAO,EAAE;AACLU,UAAAA,KAAK,EAAE,uCADF;AAELC,UAAAA,SAAS,EAAE;AAAEC,YAAAA,KAAK,EAAE;AAAT,WAFN;AAGLC,UAAAA,KAAK,EAAE;AACHH,YAAAA,KAAK,EAAE,eADJ;AAEHI,YAAAA,QAAQ,EAAE;AAFP,WAHF;AAOLC,UAAAA,KAAK,EAAE;AACHL,YAAAA,KAAK,EAAE;AADJ;AAPF,SANb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAsBH;;;;EApEmBjB,S;;AAuExB,eAAeG,SAAf","sourcesContent":["import React, { Component } from 'react';\nimport Chart from 'react-google-charts';\nimport axios from \"axios\";\n\nclass BarCharts extends Component {\n    constructor(props) {\n\n        super(props);\n            // neoDataObject :Assigner un l'object NEO (props du parent) à un state en ciblant 'near_earth_objects'\n            // neoDataDisplay : Créer un state qui va etre utiliser comme une base avec par default les titres du graph\n        this.state = {\n            neoDataObject : {},\n            neoDataDisplay: [['NEO Name', 'Min Estimated Diameter (KMS)', 'Max Estimated Diameter'],]\n        };\n\n    }\n\n    componentDidMount(){\n        const neoApiData =\n            axios.get('https://api.nasa.gov/neo/rest/v1/neo/browse?api_key=h2vuNpgOwi4P3bqUpqys0ANkIuHL1cebMn0jeWE5')\n                .then(res => {\n                    return res.data;\n                });\n\n        neoApiData.then(function (value) {\n           this.setState({neoDataObject : value});\n        });\n\n        //console.log(neoApiData);\n        console.log(this.state.neoDataObject);\n\n        //fetch(this.state.neoDataObject).then(response => )\n    }\n\n    render() {\n\n        //Ajouter les valeurs souhaiter dans le state neoDataDisplay avant de les afficher\n\n\n\n        /*neoApiData.then(function (value) {\n            console.log(value);\n        });*/\n\n        //let neoDataDisplay  = this.state.neoDataDisplay;\n        /*this.state.neoDataObject.map((obj) =>\n            neoDataDisplay.push([obj.name , obj.estimated_diameter.kilometers.estimated_diameter_min,\n                                            obj.estimated_diameter.kilometers.estimated_diameter_max])\n        );*/\n\n        return (\n            <div>\n                <Chart\n                    width={'700px'}\n                    height={'500px'}\n                    chartType=\"BarChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={this.state.neoDataDisplay}\n                    options={{\n                        title: 'Near Earth Objects estimated diameter',\n                        chartArea: { width: '50%' },\n                        hAxis: {\n                            title: 'Diametre (KM)',\n                            minValue: 0,\n                        },\n                        vAxis: {\n                            title: 'NEO Name',\n                        },\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\nexport default BarCharts;\n"]},"metadata":{},"sourceType":"module"}